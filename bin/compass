#!/usr/bin/python

import os
import re
import sys

from itertools import groupby

STATUSES = {
    'A': 'added',
    'D': 'deleted',
    'M': 'modified'
}

DIRECTIONS = {
    'F': 'forward',
    'B': 'backward',
}

def display_status(status):
    return STATUSES.get(status)

def display_direction(direction):
    return DIRECTIONS.get(direction)

class MigrationList(object):

    def __init__(self, items=None):
        if items:
            self.items = items
        self.items = []

    def add(self, migration):
        return self.items.append(migration)

    def remove(self, migration):
        return self.items.remove(migration)

    def plan(self):
        self.items.sort(key=lambda x: (x.app, x.direction, x.migration))
        # TODO: migrate to the last point of the group
        for key, group in groupby(self.items, lambda x: x.app):
            for item in group:
                print item

    def migrate_all(self):
        for item in self.items:
            item.migrate()

class Migration(object):

    def __init__(self, app, migration, direction="F", **kwargs):
        self.app = app
        if not direction in DIRECTIONS.keys():
            raise ValueError('Invalid value for direction')
        self.direction = direction
        self.old = kwargs.pop('old', None)
        self.migration = migration
        self.prefix = kwargs.pop('prefix', '')
        if self.direction == 'B':
            self.migration = str(int(migration.lstrip('0'))-1).zfill(4)

    def __str__(self):
        return 'migrate %s %s to %s' % (self.app,
                display_direction(self.direction),
                self.migration)

    def migrate(self):
        if self.direction == 'B':
            os.system('git checkout %s %s%s/migrations' % (self.old, self.prefix, self.app))
        cmd = 'python manage.py migrate %s %s' % (self.app, self.migration)
        print cmd
        os.system(cmd)
        if self.direction == 'B':
            os.system('git reset HEAD %s %s%s/migrations' % (self.old, self.prefix, self.app))
            os.system('git clean -f %s %s%s/migrations' %(self.old, self.prefix, self.app))


def post_checkout(old, new):

    migrations = MigrationList()

    cmd = 'git diff --name-status %s %s | grep /migrations/' % (
        old, new)
    for line in os.popen(cmd).readlines():
        status, filepath = line.split()
        # search for the migration number
        app, text, migration = re.compile('\w+/migrations/\d+').search(filepath).group().split('/')
        prefix = filepath.split(app)[0]
        if app and migration:
            if status == 'D':
                direction = 'B'
            else:
                direction = 'F'
            migration = Migration(app,
                    migration, direction, old=old, prefix=prefix)
            migrations.add(migration)

    migrations.plan()
    migrations.migrate_all()

def main():
    args = sys.argv

    if len(args) >= 2:
        command = args[1]

        if command == 'post-checkout':
            old = args[2]
            new = args[3]
            post_checkout(old, new)

        elif command == 'install':
            f = file('.git/hooks/post-checkout', 'w')
            f.write('#!/bin/bash\n')
            f.write('\n')
            f.write('compass post-checkout $@')
            f.close()
            os.system('chmod +x .git/hooks/post-checkout')
            print 'Compass installed!'

        else:

            print 'Use `compass install` to install to current repository'

    else:
        print 'Use `compass install` to install to current repository'

if __name__ == '__main__':
    main()
